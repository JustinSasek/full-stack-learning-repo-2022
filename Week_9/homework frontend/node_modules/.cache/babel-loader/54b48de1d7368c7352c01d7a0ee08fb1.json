{"ast":null,"code":"import _slicedToArray from \"/Users/justinsasek/Code/TPEO/full-stack-learning-repo-2022/Week_9/homework frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\nfunction useToggle(initialValue, options) {\n  var _useState = useState(initialValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var toggle = function toggle(value) {\n    if (typeof value !== \"undefined\") {\n      setState(value);\n    } else {\n      setState(function (current) {\n        if (current === options[0]) {\n          return options[1];\n        }\n        return options[0];\n      });\n    }\n  };\n  return [state, toggle];\n}\nfunction useBooleanToggle() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return useToggle(initialValue, [true, false]);\n}\nexport { useBooleanToggle, useToggle };","map":{"version":3,"mappings":";;AACO,SAASA,SAAS,CAACC,YAAY,EAAEC,OAAO,EAAE;EAC/C,gBAA0BC,QAAQ,CAACF,YAAY,CAAC;IAAA;IAAzCG,KAAK;IAAEC,QAAQ;EACtB,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAIC,KAAK,EAAK;IACxB,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;MAChCF,QAAQ,CAACE,KAAK,CAAC;IACrB,CAAK,MAAM;MACLF,QAAQ,CAAC,UAACG,OAAO,EAAK;QACpB,IAAIA,OAAO,KAAKN,OAAO,CAAC,CAAC,CAAC,EAAE;UAC1B,OAAOA,OAAO,CAAC,CAAC,CAAC;QAC3B;QACQ,OAAOA,OAAO,CAAC,CAAC,CAAC;MACzB,CAAO,CAAC;IACR;EACA,CAAG;EACD,OAAO,CAACE,KAAK,EAAEE,MAAM,CAAC;AACxB;AACO,SAASG,gBAAgB,GAAuB;EAAA,IAAtBR,YAAY,uEAAG,KAAK;EACnD,OAAOD,SAAS,CAACC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC/C","names":["useToggle","initialValue","options","useState","state","setState","toggle","value","current","useBooleanToggle"],"sources":["../../src/use-toggle/use-toggle.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useToggle<T>(initialValue: T, options: [T, T]) {\n  const [state, setState] = useState(initialValue);\n\n  const toggle = (value?: React.SetStateAction<T>) => {\n    if (typeof value !== 'undefined') {\n      setState(value);\n    } else {\n      setState((current) => {\n        if (current === options[0]) {\n          return options[1];\n        }\n\n        return options[0];\n      });\n    }\n  };\n\n  return [state, toggle] as const;\n}\n\nexport function useBooleanToggle(initialValue = false) {\n  return useToggle(initialValue, [true, false]);\n}\n"]},"metadata":{},"sourceType":"module"}