{"ast":null,"code":"import React, { forwardRef, useRef } from 'react';\nimport { getDefaultZIndex } from '@mantine/styles';\nimport { SelectScrollArea } from '../SelectScrollArea/SelectScrollArea.js';\nimport useStyles from './SelectDropdown.styles.js';\nimport { Popper } from '../../Popper/Popper.js';\nimport { Paper } from '../../Paper/Paper.js';\nvar SelectDropdown = forwardRef(function (_ref, ref) {\n  var mounted = _ref.mounted,\n    transition = _ref.transition,\n    transitionDuration = _ref.transitionDuration,\n    transitionTimingFunction = _ref.transitionTimingFunction,\n    uuid = _ref.uuid,\n    shadow = _ref.shadow,\n    maxDropdownHeight = _ref.maxDropdownHeight,\n    _ref$withinPortal = _ref.withinPortal,\n    withinPortal = _ref$withinPortal === void 0 ? true : _ref$withinPortal,\n    children = _ref.children,\n    classNames = _ref.classNames,\n    styles = _ref.styles,\n    dropdownComponent = _ref.dropdownComponent,\n    referenceElement = _ref.referenceElement,\n    _ref$direction = _ref.direction,\n    direction = _ref$direction === void 0 ? \"column\" : _ref$direction,\n    onDirectionChange = _ref.onDirectionChange,\n    _ref$switchDirectionO = _ref.switchDirectionOnFlip,\n    switchDirectionOnFlip = _ref$switchDirectionO === void 0 ? false : _ref$switchDirectionO,\n    _ref$zIndex = _ref.zIndex,\n    zIndex = _ref$zIndex === void 0 ? getDefaultZIndex(\"popover\") : _ref$zIndex,\n    _ref$dropdownPosition = _ref.dropdownPosition,\n    dropdownPosition = _ref$dropdownPosition === void 0 ? \"flip\" : _ref$dropdownPosition,\n    __staticSelector = _ref.__staticSelector,\n    _ref$positionDependen = _ref.positionDependencies,\n    positionDependencies = _ref$positionDependen === void 0 ? [] : _ref$positionDependen;\n  var _useStyles = useStyles({\n      native: dropdownComponent !== SelectScrollArea\n    }, {\n      classNames: classNames,\n      styles: styles,\n      name: __staticSelector\n    }),\n    classes = _useStyles.classes;\n  var previousPlacement = useRef(\"bottom\");\n  return /* @__PURE__ */React.createElement(Popper, {\n    referenceElement: referenceElement,\n    mounted: mounted,\n    transition: transition,\n    transitionDuration: transitionDuration,\n    exitTransitionDuration: 0,\n    transitionTimingFunction: transitionTimingFunction,\n    position: dropdownPosition === \"flip\" ? \"bottom\" : dropdownPosition,\n    withinPortal: withinPortal,\n    forceUpdateDependencies: positionDependencies,\n    zIndex: zIndex,\n    modifiers: [{\n      name: \"preventOverflow\",\n      enabled: false\n    }, {\n      name: \"flip\",\n      enabled: dropdownPosition === \"flip\"\n    }, {\n      name: \"sameWidth\",\n      enabled: true,\n      phase: \"beforeWrite\",\n      requires: [\"computeStyles\"],\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n        state.styles.popper.width = \"\".concat(state.rects.reference.width, \"px\");\n      },\n      effect: function effect(_ref3) {\n        var state = _ref3.state;\n        state.elements.popper.style.width = \"\".concat(state.elements.reference.offsetWidth, \"px\");\n      }\n    }, {\n      name: \"directionControl\",\n      enabled: true,\n      phase: \"main\",\n      fn: function fn(_ref4) {\n        var state = _ref4.state;\n        if (previousPlacement.current !== state.placement) {\n          previousPlacement.current = state.placement;\n          var nextDirection = state.placement === \"top\" ? \"column-reverse\" : \"column\";\n          if (direction !== nextDirection && switchDirectionOnFlip) {\n            onDirectionChange && onDirectionChange(nextDirection);\n          }\n        }\n      }\n    }]\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    style: {\n      maxHeight: maxDropdownHeight,\n      display: \"flex\"\n    }\n  }, /* @__PURE__ */React.createElement(Paper, {\n    radius: \"sm\",\n    component: dropdownComponent || \"div\",\n    id: \"\".concat(uuid, \"-items\"),\n    \"aria-labelledby\": \"\".concat(uuid, \"-label\"),\n    role: \"listbox\",\n    className: classes.dropdown,\n    shadow: shadow,\n    ref: ref,\n    onMouseDown: function onMouseDown(event) {\n      return event.preventDefault();\n    }\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: direction,\n      width: \"100%\"\n    }\n  }, children))));\n});\nSelectDropdown.displayName = \"@mantine/core/SelectDropdown\";\nexport { SelectDropdown };","map":{"version":3,"mappings":"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","names":["SelectDropdown","forwardRef","ref","mounted","transition","transitionDuration","transitionTimingFunction","uuid","shadow","maxDropdownHeight","withinPortal","children","classNames","styles","dropdownComponent","referenceElement","direction","onDirectionChange","switchDirectionOnFlip","zIndex","getDefaultZIndex","dropdownPosition","__staticSelector","positionDependencies","useStyles","native","SelectScrollArea","name","classes","previousPlacement","useRef","React","createElement","Popper","exitTransitionDuration","position","forceUpdateDependencies","modifiers","enabled","phase","requires","fn","state","popper","width","rects","reference","effect","elements","style","offsetWidth","current","placement","nextDirection","maxHeight","display","Paper","radius","component","id","role","className","dropdown","onMouseDown","event","preventDefault","flexDirection","displayName"],"sources":["../../../../src/components/Select/SelectDropdown/SelectDropdown.tsx"],"sourcesContent":["import React, { forwardRef, useRef } from 'react';\nimport { DefaultProps, MantineShadow, Selectors, getDefaultZIndex } from '@mantine/styles';\nimport type { Placement } from '@popperjs/core';\nimport { SelectScrollArea } from '../SelectScrollArea/SelectScrollArea';\nimport { MantineTransition } from '../../Transition';\nimport { Paper } from '../../Paper';\nimport useStyles from './SelectDropdown.styles';\nimport { Popper } from '../../Popper';\n\nexport type SelectDropdownStylesNames = Selectors<typeof useStyles>;\n\ninterface SelectDropdownProps extends DefaultProps<SelectDropdownStylesNames> {\n  mounted: boolean;\n  transition: MantineTransition;\n  transitionDuration: number;\n  transitionTimingFunction: string;\n  uuid: string;\n  shadow: MantineShadow;\n  maxDropdownHeight?: number | string;\n  withinPortal?: boolean;\n  children: React.ReactNode;\n  __staticSelector: string;\n  dropdownComponent?: React.FC<any>;\n  referenceElement?: HTMLElement;\n  direction?: React.CSSProperties['flexDirection'];\n  onDirectionChange?: (direction: React.CSSProperties['flexDirection']) => void;\n  switchDirectionOnFlip?: boolean;\n  zIndex?: number;\n  dropdownPosition?: 'bottom' | 'top' | 'flip';\n  positionDependencies?: any[];\n}\n\nexport const SelectDropdown = forwardRef<HTMLDivElement, SelectDropdownProps>(\n  (\n    {\n      mounted,\n      transition,\n      transitionDuration,\n      transitionTimingFunction,\n      uuid,\n      shadow,\n      maxDropdownHeight,\n      withinPortal = true,\n      children,\n      classNames,\n      styles,\n      dropdownComponent,\n      referenceElement,\n      direction = 'column',\n      onDirectionChange,\n      switchDirectionOnFlip = false,\n      zIndex = getDefaultZIndex('popover'),\n      dropdownPosition = 'flip',\n      __staticSelector,\n      positionDependencies = [],\n    }: SelectDropdownProps,\n    ref\n  ) => {\n    const { classes } = useStyles(\n      { native: dropdownComponent !== SelectScrollArea },\n      { classNames, styles, name: __staticSelector }\n    );\n\n    const previousPlacement = useRef<Placement>('bottom');\n\n    return (\n      <Popper\n        referenceElement={referenceElement}\n        mounted={mounted}\n        transition={transition}\n        transitionDuration={transitionDuration}\n        exitTransitionDuration={0}\n        transitionTimingFunction={transitionTimingFunction}\n        position={dropdownPosition === 'flip' ? 'bottom' : dropdownPosition}\n        withinPortal={withinPortal}\n        forceUpdateDependencies={positionDependencies}\n        zIndex={zIndex}\n        modifiers={[\n          {\n            name: 'preventOverflow',\n            enabled: false,\n          },\n          {\n            name: 'flip',\n            enabled: dropdownPosition === 'flip',\n          },\n          {\n            // @ts-ignore\n            name: 'sameWidth',\n            enabled: true,\n            phase: 'beforeWrite',\n            requires: ['computeStyles'],\n            fn: ({ state }) => {\n              // eslint-disable-next-line no-param-reassign\n              state.styles.popper.width = `${state.rects.reference.width}px`;\n            },\n            effect: ({ state }) => {\n              // eslint-disable-next-line no-param-reassign\n              state.elements.popper.style.width = `${state.elements.reference.offsetWidth}px`;\n            },\n          },\n          {\n            // @ts-ignore\n            name: 'directionControl',\n            enabled: true,\n            phase: 'main',\n            fn: ({ state }) => {\n              if (previousPlacement.current !== state.placement) {\n                previousPlacement.current = state.placement;\n\n                const nextDirection = state.placement === 'top' ? 'column-reverse' : 'column';\n\n                if (direction !== nextDirection && switchDirectionOnFlip) {\n                  onDirectionChange && onDirectionChange(nextDirection);\n                }\n              }\n            },\n          },\n        ]}\n      >\n        <div style={{ maxHeight: maxDropdownHeight, display: 'flex' }}>\n          <Paper<'div'>\n            radius=\"sm\"\n            component={(dropdownComponent || 'div') as any}\n            id={`${uuid}-items`}\n            aria-labelledby={`${uuid}-label`}\n            role=\"listbox\"\n            className={classes.dropdown}\n            shadow={shadow}\n            ref={ref}\n            onMouseDown={(event) => event.preventDefault()}\n          >\n            <div style={{ display: 'flex', flexDirection: direction, width: '100%' }}>\n              {children}\n            </div>\n          </Paper>\n        </div>\n      </Popper>\n    );\n  }\n);\n\nSelectDropdown.displayName = '@mantine/core/SelectDropdown';\n"]},"metadata":{},"sourceType":"module"}