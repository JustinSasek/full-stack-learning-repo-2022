{"ast":null,"code":"import _toConsumableArray from \"/Users/justinsasek/Code/TPEO/full-stack-learning-repo-2022/Week_9/homework frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/justinsasek/Code/TPEO/full-stack-learning-repo-2022/Week_9/homework frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled.js';\nimport { range } from '../utils/range/range.js';\nvar DOTS = \"dots\";\nfunction usePagination(_ref) {\n  var total = _ref.total,\n    _ref$siblings = _ref.siblings,\n    siblings = _ref$siblings === void 0 ? 1 : _ref$siblings,\n    _ref$boundaries = _ref.boundaries,\n    boundaries = _ref$boundaries === void 0 ? 1 : _ref$boundaries,\n    page = _ref.page,\n    _ref$initialPage = _ref.initialPage,\n    initialPage = _ref$initialPage === void 0 ? 1 : _ref$initialPage,\n    onChange = _ref.onChange;\n  var _useUncontrolled = useUncontrolled({\n      value: page,\n      onChange: onChange,\n      defaultValue: initialPage,\n      finalValue: initialPage,\n      rule: function rule(_page) {\n        return typeof _page === \"number\" && _page <= total;\n      }\n    }),\n    _useUncontrolled2 = _slicedToArray(_useUncontrolled, 2),\n    activePage = _useUncontrolled2[0],\n    setActivePage = _useUncontrolled2[1];\n  var setPage = function setPage(pageNumber) {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n  var next = function next() {\n    return setPage(activePage + 1);\n  };\n  var previous = function previous() {\n    return setPage(activePage - 1);\n  };\n  var first = function first() {\n    return setPage(1);\n  };\n  var last = function last() {\n    return setPage(total);\n  };\n  var paginationRange = useMemo(function () {\n    var totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n    var leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    var rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    var shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    var shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      var leftItemCount = siblings * 2 + boundaries + 2;\n      return [].concat(_toConsumableArray(range(1, leftItemCount)), [DOTS], _toConsumableArray(range(total - (boundaries - 1), total)));\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      var rightItemCount = boundaries + 1 + 2 * siblings;\n      return [].concat(_toConsumableArray(range(1, boundaries)), [DOTS], _toConsumableArray(range(total - rightItemCount, total)));\n    }\n    return [].concat(_toConsumableArray(range(1, boundaries)), [DOTS], _toConsumableArray(range(leftSiblingIndex, rightSiblingIndex)), [DOTS], _toConsumableArray(range(total - boundaries + 1, total)));\n  }, [total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage: setPage,\n    next: next,\n    previous: previous,\n    first: first,\n    last: last\n  };\n}\nexport { DOTS, usePagination };","map":{"version":3,"mappings":"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","names":["DOTS","usePagination","total","siblings","boundaries","page","initialPage","onChange","useUncontrolled","value","defaultValue","finalValue","rule","_page","activePage","setActivePage","setPage","pageNumber","next","previous","first","last","paginationRange","useMemo","totalPageNumbers","range","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","leftItemCount","rightItemCount","active"],"sources":["../../src/use-pagination/use-pagination.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled';\nimport { range } from '../utils';\n\nexport const DOTS = 'dots';\n\nexport interface PaginationParams {\n  /** Page selected on initial render, defaults to 1 */\n  initialPage?: number;\n\n  /** Controlled active page number */\n  page?: number;\n\n  /** Total amount of pages */\n  total: number;\n\n  /** Siblings amount on left/right side of selected page, defaults to 1 */\n  siblings?: number;\n\n  /** Amount of elements visible on left/right edges, defaults to 1  */\n  boundaries?: number;\n\n  /** Callback fired after change of each page */\n  onChange?: (page: number) => void;\n}\n\nexport function usePagination({\n  total,\n  siblings = 1,\n  boundaries = 1,\n  page,\n  initialPage = 1,\n  onChange,\n}: PaginationParams) {\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage,\n    rule: (_page) => typeof _page === 'number' && _page <= total,\n  });\n\n  const setPage = (pageNumber: number) => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo((): (number | 'dots')[] => {\n    // Pages count is determined as siblings (left/right) + boundaries(left/right) + currentPage + 2*DOTS\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n\n    /*\n     * If the number of pages is less than the page numbers we want to show in our\n     * paginationComponent, we return the range [1..total]\n     */\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n\n    /*\n     * We do not want to show dots if there is only one position left\n     * after/before the left/right page count as that would lead to a change if our Pagination\n     * component size which we do not want\n     */\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [\n      ...range(1, boundaries),\n      DOTS,\n      ...range(leftSiblingIndex, rightSiblingIndex),\n      DOTS,\n      ...range(total - boundaries + 1, total),\n    ];\n  }, [total, siblings, activePage]);\n\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}